services:
  postgres:
    container_name: postgres
    image: postgres:16.4
    ports:
      - "5432:5432"
    volumes:
      - database:/var/lib/postgresql/data
    env_file:
      - .postgres.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cutcar"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - app-network
  adminer:
    container_name: adminer
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    networks:
      - app-network
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - server
    networks:
      - app-network
    restart: always
    # volumes:
    #   - ./client/.env:/client/.env
    command: bun run start
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file:
      - ./server/.env
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL="postgresql://postgres:A9kL3mQ7wX2pT5sV8zR1@postgres:5432/cutcar?schema=public"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: always
    # volumes:
    #   - ./server/.env:/server/.env
    command: bun run start # Предполагается, что сервер компилируется в dist/index.js
networks:
  app-network:
    name: app-network
volumes:
  database:
